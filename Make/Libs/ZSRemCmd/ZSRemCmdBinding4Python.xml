<?xml version="1.0"?>
<typesystem package="ZSQtLib.ZSRemCmd">
    <load-typesystem name="typesystem_core.xml" generate="no"/>
    <load-typesystem name="typesystem_xml.xml" generate="no"/>
    <load-typesystem name="typesystem_network.xml" generate="no"/>
    <load-typesystem name="typesystem_gui.xml" generate="no"/>
    <load-typesystem name="ZSSysBinding4Python.xml" generate="no"/>
    <load-typesystem name="ZSIpcBinding4Python.xml" generate="no"/>
    <load-typesystem name="ZSTraceBinding4Python.xml" generate="no"/>
    <function signature="errnr_to_str(int,int)"/>
    <function signature="str_to_errnr(QString)"/>
    <namespace-type name="ZS" generate="no">
        <namespace-type name="RemCmd" generate="no">
            <!-- ZSRemCmdDllMain.h -->
            <!-- ZSRemCmdErrNumbers.h -->
            <enum-type name="EErrNr"/>
            <enum-type name="EErrNrAliasStr"/>
            <!-- ZSRemCmdMsg.h -->
            <enum-type name="EMsgType"/>
            <enum-type name="ERequest"/>
            <object-type name="CMsgReqCmdExecute"/>
            <object-type name="CMsgConCmdExecute"/>
            <!-- ZSRemCmdObj.h -->
            <object-type name="CRemCmdObj">
                <modify-field name="m_pvObj" write="false" read="false" remove="all"/>
            </object-type>
            <suppress-warning text="skipping field 'CRemCmdObj::m_fctExecute' with unmatched type 'ZS::CRequest'"/>
            <!-- ZSRemCmdSubSysNode.h -->
            <object-type name="CRemCmdSubSysNode" />
            <!-- ZSRemCmdObjPool.h -->
            <object-type name="CRemCmdObjPool" />
            <!-- ZSRemCmdParser.h -->
            <object-type name="CRemCmdParser">
                <modify-function signature="parse(QByteArray, QString*, bool*, QList&lt;QByteArray&gt;*) const">
                    <modify-argument index="2">
                        <remove-argument/>
                    </modify-argument>
                    <modify-argument index="3">
                        <remove-argument/>
                    </modify-argument>
                    <modify-argument index="4">
                        <remove-argument/>
                    </modify-argument>
                    <modify-argument index="return">
                        <replace-type modified-type="(errResultInfo, cmd, isQuery, args)"/>
                    </modify-argument>
                    <inject-code class="target" position="beginning">
                        QString                 strCmd;
                        bool                    bIsQuery;
                        QList&lt;QByteArray&gt; strLstArgs;
                        %RETURN_TYPE retval = %CPPSELF.%FUNCTION_NAME(%ARGUMENT_NAMES, &amp;strCmd, &amp;bIsQuery, &amp;strLstArgs);
                        %PYARG_0 = PyTuple_New(4);
                        PyTuple_SET_ITEM(%PYARG_0, 0, %CONVERTTOPYTHON[%RETURN_TYPE](retval));
                        PyTuple_SET_ITEM(%PYARG_0, 1, %CONVERTTOPYTHON[QString](strCmd));
                        PyTuple_SET_ITEM(%PYARG_0, 2, %CONVERTTOPYTHON[bool](bIsQuery));
                        PyTuple_SET_ITEM(%PYARG_0, 3, %CONVERTTOPYTHON[QList&lt;QByteArray&gt;](strLstArgs));
                    </inject-code>
                </modify-function>
            </object-type>
            <!-- ZSRemCmdServer.h -->
            <object-type name="CRemCmdServer">
                <modify-function signature="parseData(QByteArray, QString*, bool*, QByteArray*) const">
                    <modify-argument index="2">
                        <remove-argument/>
                    </modify-argument>
                    <modify-argument index="3">
                        <remove-argument/>
                    </modify-argument>
                    <modify-argument index="4">
                        <remove-argument/>
                    </modify-argument>
                    <modify-argument index="return">
                        <replace-type modified-type="(errResultInfo, cmd, isQuery, args)"/>
                    </modify-argument>
                    <inject-code class="target" position="beginning">
                        QString    strCmd;
                        bool       bIsQuery;
                        QByteArray byteArrArgs;
                        %RETURN_TYPE retval = %CPPSELF.%FUNCTION_NAME(%ARGUMENT_NAMES, &amp;strCmd, &amp;bIsQuery, &amp;byteArrArgs);
                        %PYARG_0 = PyTuple_New(4);
                        PyTuple_SET_ITEM(%PYARG_0, 0, %CONVERTTOPYTHON[%RETURN_TYPE](retval));
                        PyTuple_SET_ITEM(%PYARG_0, 1, %CONVERTTOPYTHON[QString](strCmd));
                        PyTuple_SET_ITEM(%PYARG_0, 2, %CONVERTTOPYTHON[bool](bIsQuery));
                        PyTuple_SET_ITEM(%PYARG_0, 3, %CONVERTTOPYTHON[QByteArray](byteArrArgs));
                    </inject-code>
                </modify-function>
            </object-type>
            <!-- ZSRemCmdClient.h -->
            <object-type name="CRemCmdClient">
                <modify-function signature="parseData(QByteArray, QString*, bool*, QByteArray*) const">
                    <modify-argument index="2">
                        <remove-argument/>
                    </modify-argument>
                    <modify-argument index="3">
                        <remove-argument/>
                    </modify-argument>
                    <modify-argument index="4">
                        <remove-argument/>
                    </modify-argument>
                    <modify-argument index="return">
                        <replace-type modified-type="(errResultInfo, cmd, isQuery, args)"/>
                    </modify-argument>
                    <inject-code class="target" position="beginning">
                        QString    strCmd;
                        bool       bIsQuery;
                        QByteArray byteArrArgs;
                        %RETURN_TYPE retval = %CPPSELF.%FUNCTION_NAME(%ARGUMENT_NAMES, &amp;strCmd, &amp;bIsQuery, &amp;byteArrArgs);
                        %PYARG_0 = PyTuple_New(4);
                        PyTuple_SET_ITEM(%PYARG_0, 0, %CONVERTTOPYTHON[%RETURN_TYPE](retval));
                        PyTuple_SET_ITEM(%PYARG_0, 1, %CONVERTTOPYTHON[QString](strCmd));
                        PyTuple_SET_ITEM(%PYARG_0, 2, %CONVERTTOPYTHON[bool](bIsQuery));
                        PyTuple_SET_ITEM(%PYARG_0, 3, %CONVERTTOPYTHON[QByteArray](byteArrArgs));
                    </inject-code>
                </modify-function>
            </object-type>
        </namespace-type>
    </namespace-type>
</typesystem>
