<GUIMain                 > -> <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.startClass3Thread(Inst1)
<GUIMain                 >    <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.startClass3Thread: postEvent( {ZS::Apps::Test::IpcTrace::ReqTest, startClass3Thread} )
<GUIMain                 >    -> <ZS::System::CMutex> CMyClass2-Inst1-WaitClass3ThreadRunning.tryLock(0 ms)
<GUIMain                 >    <- <ZS::System::CMutex> CMyClass2-Inst1-WaitClass3ThreadRunning.tryLock(): true
<GUIMain                 >    -> <ZS::System::CWaitCondition> CMyClass2-Inst1-Class3ThreadRunning.wait(100 ms)
<MyClass2ThreadInst1     >       -> <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.event({ZS::Apps::Test::IpcTrace::ReqTest, startClass3Thread})
<MyClass2ThreadInst1     >          -> <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.startClass3Thread(Inst1)
<MyClass2ThreadInst1     >             -> <ZS::Apps::Test::IpcTrace::CMyClass3Thread> MyClass3ThreadInst1.ctor(Inst1, Inst1)
<MyClass2ThreadInst1     >             <- <ZS::Apps::Test::IpcTrace::CMyClass3Thread> MyClass3ThreadInst1.ctor()
<MyClass2ThreadInst1     >             -> <ZS::Apps::Test::IpcTrace::CMyClass3Thread> MyClass3ThreadInst1.start(InheritPriority)
<MyClass2ThreadInst1     >             <- <ZS::Apps::Test::IpcTrace::CMyClass3Thread> MyClass3ThreadInst1.start()
<MyClass2ThreadInst1     >             -> <ZS::System::CMutex> CMyClass2-Inst1-WaitClass3ThreadRunning.tryLock(0 ms)
<MyClass2ThreadInst1     >             <- <ZS::System::CMutex> CMyClass2-Inst1-WaitClass3ThreadRunning.tryLock(): true
<MyClass2ThreadInst1     >             -> <ZS::System::CWaitCondition> CMyClass2-Inst1-Class3ThreadRunning.wait(100 ms)
<MyClass3ThreadInst1     > -> <ZS::Apps::Test::IpcTrace::CMyClass3Thread> MyClass3ThreadInst1.run()
<MyClass3ThreadInst1     >    -> <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.ctor(Inst1, MyClass3ThreadInst1)
<MyClass3ThreadInst1     >       -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.ctor(Recursive)
<MyClass3ThreadInst1     >       <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.ctor()
<MyClass3ThreadInst1     >    <- <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.ctor()
<MyClass3ThreadInst1     >    -> <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.onClass3ThreadRunning()
<MyClass3ThreadInst1     >       -> <ZS::System::CWaitCondition> CMyClass2-Inst1-Class3ThreadRunning.notify_all()
<MyClass3ThreadInst1     >       <- <ZS::System::CWaitCondition> CMyClass2-Inst1-Class3ThreadRunning.notify_all()
<GUIMain                 >    <- <ZS::System::CWaitCondition> CMyClass2-Inst1-Class3ThreadRunning.wait(): true
<MyClass3ThreadInst1     >    <- <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.onClass3ThreadRunning()
<GUIMain                 >    -> <ZS::System::CMutex> CMyClass2-Inst1-WaitClass3ThreadRunning.unlock()
<GUIMain                 >    <- <ZS::System::CMutex> CMyClass2-Inst1-WaitClass3ThreadRunning.unlock()
<MyClass2ThreadInst1     >             <- <ZS::System::CWaitCondition> CMyClass2-Inst1-Class3ThreadRunning.wait(): true
<GUIMain                 > <- <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.startClass3Thread(): Inst1
<MyClass2ThreadInst1     >             -> <ZS::System::CMutex> CMyClass2-Inst1-WaitClass3ThreadRunning.unlock()
<MyClass2ThreadInst1     >             <- <ZS::System::CMutex> CMyClass2-Inst1-WaitClass3ThreadRunning.unlock()
<MyClass2ThreadInst1     >          <- <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.startClass3Thread(): Inst1
<MyClass2ThreadInst1     >       <- <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.event()
<MyClass3ThreadInst1     >    -> <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod()
<MyClass3ThreadInst1     >       -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
<MyClass3ThreadInst1     >       <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
<MyClass3ThreadInst1     >       <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod: RecursionCount=0
<MyClass3ThreadInst1     >       -> <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod()
<MyClass3ThreadInst1     >          -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
<MyClass3ThreadInst1     >          <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
<MyClass3ThreadInst1     >          <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod: RecursionCount=1
<MyClass3ThreadInst1     >          -> <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod()
<MyClass3ThreadInst1     >             -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
<MyClass3ThreadInst1     >             <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
<MyClass3ThreadInst1     >             <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod: RecursionCount=2
<MyClass3ThreadInst1     >             -> <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod()
<MyClass3ThreadInst1     >                -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
<MyClass3ThreadInst1     >                <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
<MyClass3ThreadInst1     >                <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod: RecursionCount=3
<MyClass3ThreadInst1     >                -> <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod()
<MyClass3ThreadInst1     >                   -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
<MyClass3ThreadInst1     >                   <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
<MyClass3ThreadInst1     >                   <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod: RecursionCount=4
<MyClass3ThreadInst1     >                   -> <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod()
<MyClass3ThreadInst1     >                      -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
<MyClass3ThreadInst1     >                      <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
<MyClass3ThreadInst1     >                      <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod: RecursionCount=5
<MyClass3ThreadInst1     >                      -> <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod()
<MyClass3ThreadInst1     >                         -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
<MyClass3ThreadInst1     >                         <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
<MyClass3ThreadInst1     >                         <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod: RecursionCount=6
<MyClass3ThreadInst1     >                         -> <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod()
<MyClass3ThreadInst1     >                            -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
<MyClass3ThreadInst1     >                            <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
<MyClass3ThreadInst1     >                            <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod: RecursionCount=7
<MyClass3ThreadInst1     >                            -> <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod()
<MyClass3ThreadInst1     >                               -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
<MyClass3ThreadInst1     >                               <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
<MyClass3ThreadInst1     >                               <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod: RecursionCount=8
<MyClass3ThreadInst1     >                               -> <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod()
<MyClass3ThreadInst1     >                                  -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
<MyClass3ThreadInst1     >                                  <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
<MyClass3ThreadInst1     >                                  <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod: RecursionCount=9
<MyClass3ThreadInst1     >                                  -> <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod()
<MyClass3ThreadInst1     >                                     -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
<MyClass3ThreadInst1     >                                     <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
<MyClass3ThreadInst1     >                                     <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod: RecursionCount=10
<MyClass3ThreadInst1     >                                     -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
<MyClass3ThreadInst1     >                                     <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
<MyClass3ThreadInst1     >                                  <- <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod(): 10
<MyClass3ThreadInst1     >                                  -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
<MyClass3ThreadInst1     >                                  <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
<MyClass3ThreadInst1     >                               <- <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod(): 9
<MyClass3ThreadInst1     >                               -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
<MyClass3ThreadInst1     >                               <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
<MyClass3ThreadInst1     >                            <- <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod(): 8
<MyClass3ThreadInst1     >                            -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
<MyClass3ThreadInst1     >                            <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
<MyClass3ThreadInst1     >                         <- <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod(): 7
<MyClass3ThreadInst1     >                         -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
<MyClass3ThreadInst1     >                         <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
<MyClass3ThreadInst1     >                      <- <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod(): 6
<MyClass3ThreadInst1     >                      -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
<MyClass3ThreadInst1     >                      <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
<MyClass3ThreadInst1     >                   <- <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod(): 5
<MyClass3ThreadInst1     >                   -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
<MyClass3ThreadInst1     >                   <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
<MyClass3ThreadInst1     >                <- <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod(): 4
<MyClass3ThreadInst1     >                -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
<MyClass3ThreadInst1     >                <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
<MyClass3ThreadInst1     >             <- <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod(): 3
<MyClass3ThreadInst1     >             -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
<MyClass3ThreadInst1     >             <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
<MyClass3ThreadInst1     >          <- <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod(): 2
<MyClass3ThreadInst1     >          -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
<MyClass3ThreadInst1     >          <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
<MyClass3ThreadInst1     >       <- <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod(): 1
<MyClass3ThreadInst1     >       -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
<MyClass3ThreadInst1     >       <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
<MyClass3ThreadInst1     >    <- <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod(): 0
<MyClass3ThreadInst1     >    -> <ZS::Apps::Test::IpcTrace::CMyClass3Thread> MyClass3ThreadInst1.exec()