/*******************************************************************************

Copyright 2004 - 2020 by ZeusSoft, Ing. Buero Bauer
                         Gewerbepark 28
                         D-83670 Bad Heilbrunn
                         Tel: 0049 8046 9488
                         www.zeussoft.de
                         E-Mail: mailbox@zeussoft.de

--------------------------------------------------------------------------------

Content: This file is part of the ZSQtLib.

This file may be used with no license restrictions for your needs. But it is not
allowed to resell any modules of the ZSQtLib veiling the original developer of
the modules. Therefore the copyright link to ZeusSoft, Ing. Buero Bauer must not
be removed from the header of the source code modules.

ZeusSoft, Ing. Buero Bauer provides the source code as is without any guarantee
that the code is written without faults.

ZeusSoft, Ing. Buero Bauer does not assume any liability for any damages which
may result in using the software modules.

*******************************************************************************/

#include "ZSData/ZSDataDllMain.h"
#include "ZSIpc/ZSIpcBlkTypeSL.h"
#include "ZSSys/ZSSysVersion.h"

#ifdef _WINDOWS
#include <windows.h>
#endif

#include "ZSSys/ZSSysMemLeakDump.h"


/******************************************************************************/
class CInitModuleData
/* Please note:
   The class name should be unique for the whole system. Otherwise the compiler
   may be confused and using a CInitModule class from other modules to create
   the static InitModule instance.
*******************************************************************************/
{
public: // ctor
    CInitModuleData()
    {
        //qRegisterMetaType<SCnctSettings>("SCnctSettings");
        //qRegisterMetaType<ZS::Data::SCnctSettings>("ZS::Data::SCnctSettings");
    }
};

static CInitModuleData s_initModule;


/*******************************************************************************
public methods
*******************************************************************************/

//------------------------------------------------------------------------------
QString ZS::Data::getDllName()
//------------------------------------------------------------------------------
{
    // Mainly introduced to always have at least one method to be exported
    // so that always a lib is generated by the compiler.
    return "ZSData";
}

/* IPC Watch Dog Block
================================================================================

+-------+--------+----------+
| START | LENgth | Data ... |
+-------+--------+----------+

The START block is the GUID "c_arcIpcBlockTypeId" (36 bytes).
The LENgth is of data type UINT32 (4 bytes) and is zero for the watch dog block.
The Value is empty (there is no Value) for the watch dog block.
*/

                                                 // 012345678901234567890123456789012345
static const char         c_arcIpcBlockStart[] = { "757C637D-AB6A-4fde-A655-07DC8E8F34EB" };
static const unsigned int c_uIpcBlockStartLen  = 36; // 32 digits and 4 times "-" (see "c_arcIpcBlockStart" above)
static const QByteArray   c_byteArrBlockStart( c_arcIpcBlockStart, c_uIpcBlockStartLen );

static const ZS::Ipc::CBlkTypeSL c_blkType(
    /* byteArrBlkStart             */ c_byteArrBlockStart,
    /* blkLenDataType              */ ZS::Ipc::EBlkLenDataTypeBinUINT32,
    /* bInsertBlkStart             */ true,
    /* bRemoveBlkStart             */ true,
    /* bInsertBlkLen               */ true,
    /* bRemoveBlkLen               */ true,
    /* iStrLenBlkLenDataTypeString */ -1 ); // -1 means use default (see enum values ZS::Ipc::EBlkLenDataTypeStr<>)

static QByteArray s_byteArrIpcWatchDogBlock( c_byteArrBlockStart.size() + c_blkType.blkLenDataTypeSize(), 0x00 );

static bool s_bIpcWatchDogBlockInitialised = false;

//------------------------------------------------------------------------------
const ZS::Ipc::CBlkTypeSL ZS::Data::getIpcBlockType()
//------------------------------------------------------------------------------
{
    return c_blkType;
}

//------------------------------------------------------------------------------
QByteArray ZS::Data::getIpcWatchDogBlock()
//------------------------------------------------------------------------------
{
    if( !s_bIpcWatchDogBlockInitialised )
    {
        memcpy( s_byteArrIpcWatchDogBlock.data(), c_byteArrBlockStart.data(), c_byteArrBlockStart.size() );

        s_bIpcWatchDogBlockInitialised = true;
    }

    return s_byteArrIpcWatchDogBlock;

} // getIpcWatchDogBlock

/* Data Set Object Name Separator
==============================================================================*/

//static QString s_strDefaultDSObjNameSeparator = "/";

////------------------------------------------------------------------------------
//void ZS::Data::setDefaultDSObjNameSeparator( const QString& i_strSeparator )
////------------------------------------------------------------------------------
//{
//    s_strDefaultDSObjNameSeparator = i_strSeparator;
//}

////------------------------------------------------------------------------------
//QString ZS::Data::getDefaultDSObjNameSeparator()
////------------------------------------------------------------------------------
//{
//    return s_strDefaultDSObjNameSeparator;
//}


/*******************************************************************************
Libraries depending on build configuration and used Qt version
*******************************************************************************/

#ifdef _WINDOWS

#ifdef USE_PRAGMA_COMMENT_LIB_INCLUDE_IN_MAIN_MODULES

#pragma comment( lib, QTCORELIB )
#pragma comment( lib, QTNETWORKLIB )
#pragma comment( lib, QTXMLLIB )
#pragma comment( lib, QTSQLLIB )

#endif // #ifdef USE_PRAGMA_COMMENT_LIB_INCLUDE_IN_MAIN_MODULES

#endif // #ifdef _WINDOWS


/*******************************************************************************
Entry point for the DLL application.
*******************************************************************************/

#ifdef _WINDOWS
//------------------------------------------------------------------------------
BOOL APIENTRY DllMain(
    HANDLE /*i_hModule*/,
    DWORD  i_ul_reason_for_call,
    LPVOID /*i_lpReserved*/ )
//------------------------------------------------------------------------------
{
    switch( i_ul_reason_for_call )
    {
        case DLL_PROCESS_ATTACH:
        {
            break;
        }
        case DLL_THREAD_ATTACH:
        {
            break;
        }
        case DLL_THREAD_DETACH:
        {
            break;
        }
        case DLL_PROCESS_DETACH:
        {
            break;
        }
        default:
        {
            break;
        }
    }
    return TRUE;
}
#endif
