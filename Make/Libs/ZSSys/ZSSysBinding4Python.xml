<?xml version="1.0"?>
<typesystem package="ZSQtLib.ZSSys">
    <load-typesystem name="typesystem_core.xml" generate="no"/>
    <load-typesystem name="typesystem_xml.xml" generate="no"/>
    <load-typesystem name="typesystem_network.xml" generate="no"/>
    <load-typesystem name="typesystem_gui.xml" generate="no"/>
    <!-- ZSSysApp.h -->
    <function signature="app_config_dir(QString)"/>
    <function signature="app_log_dir(QString)"/>
    <function signature="app_data_dir(QString)"/>
    <!-- ZSSysAux.h -->
    <function signature="create_GUID()"/>
    <function signature="bool_to_str(bool)"/>
    <function signature="str_to_bool(QString)"/>
    <function signature="is_asynchronous_request(ZS::System::CRequest*)"/>
    <namespace-type name="ZS" generate="no">
        <namespace-type name="System" generate="no">
            <!-- ZSSysDllMain.h -->
            <!-- ZSSysAux.h -->
            <rejection class="ZS::System" function-name="str2ByteArr"/>
            <rejection class="ZS::System" function-name="byteArr2Str"/>
            <rejection class="ZS::System" function-name="setDebugActive"/>
            <rejection class="ZS::System" function-name="isDebugActive"/>
            <rejection class="ZS::System" function-name="bool2ByteArr"/>
            <rejection class="ZS::System" function-name="byteArr2Bool"/>
            <rejection class="ZS::System" function-name="oleVariant2Str"/>
            <rejection class="ZS::System" function-name="lastWinErrorCode2MessageStr"/>
            <rejection class="ZS::System" function-name="isNumeric"/>
            <rejection class="ZS::System" function-name="qEventType2Str"/>
            <rejection class="ZS::System" function-name="qKeyCode2Str"/>
            <rejection class="ZS::System" function-name="qKeyboardModifiers2Str"/>
            <rejection class="ZS::System" function-name="qCursorShape2Str"/>
            <rejection class="ZS::System" function-name="qVariantType2Str"/>
            <rejection class="ZS::System" function-name="qDropActions2Str"/>
            <rejection class="ZS::System" function-name="qCheckState2Str"/>
            <rejection class="ZS::System" function-name="qCaseSensitivity2Str"/>
            <enum-type name="EMode"/>
            <rejection class="ZS::System" function-name="mode2Str"/>
            <rejection class="ZS::System" function-name="str2Mode"/>
            <enum-type name="EYesNo"/>
            <rejection class="ZS::System" function-name="yesNo2Str"/>
            <rejection class="ZS::System" function-name="str2YesNo"/>
            <enum-type name="EStateOnOff"/>
            <rejection class="ZS::System" function-name="stateOnOff2Str"/>
            <rejection class="ZS::System" function-name="str2StateOnOff"/>
            <enum-type name="EEnabled"/>
            <rejection class="ZS::System" function-name="enabled2Str"/>
            <rejection class="ZS::System" function-name="str2Enabled"/>
            <enum-type name="ECopyDepth"/>
            <rejection class="ZS::System" function-name="copyDepth2Str"/>
            <rejection class="ZS::System" function-name="str2CopyDepth"/>
            <enum-type name="EObjState"/>
            <rejection class="ZS::System" function-name="objState2Str"/>
            <rejection class="ZS::System" function-name="str2ObjState"/>
            <enum-type name="EContentToStrFormat"/>
            <enum-type name="EMethodDir"/>
            <rejection class="ZS::System" function-name="methodDir2Str"/>
            <rejection class="ZS::System" function-name="str2MethodDir"/>
            <enum-type name="ETransmitDir"/>
            <rejection class="ZS::System" function-name="transmitDir2Str"/>
            <rejection class="ZS::System" function-name="str2TransmitDir"/>
            <enum-type name="EIODir"/>
            <rejection class="ZS::System" function-name="ioDir2Str"/>
            <rejection class="ZS::System" function-name="str2IODir"/>
            <enum-type name="EDirection"/>
            <rejection class="ZS::System" function-name="direction2Str"/>
            <rejection class="ZS::System" function-name="str2Direction"/>
            <enum-type name="EComparisonOperator"/>
            <rejection class="ZS::System" function-name="comparisonOperator2Str"/>
            <rejection class="ZS::System" function-name="str2ComparisonOperator"/>
            <enum-type name="EValueValidity"/>
            <rejection class="ZS::System" function-name="valueValidity2Str"/>
            <rejection class="ZS::System" function-name="str2ValueValidity"/>
            <enum-type name="EDimensionType"/>
            <rejection class="ZS::System" function-name="dimensionType2Str"/>
            <rejection class="ZS::System" function-name="str2DimensionType"/>
            <rejection class="ZS::System" field-name="EArrayIndexUndefined"/>
            <rejection class="ZS::System" field-name="EArrayIndexFirstElement"/>
            <rejection class="ZS::System" field-name="EArrayIndexLastElement"/>
            <rejection class="ZS::System" field-name="EArrayIndexCountAllElements"/>
            <rejection class="ZS::System" function-name="arrayIndex2Str"/>
            <rejection class="ZS::System" function-name="str2ArrayIndex"/>
            <rejection class="ZS::System" function-name="isValidIndex"/>
            <rejection class="ZS::System" function-name="isValidRange"/>
            <rejection class="ZS::System" function-name="toArrayLen"/>
            <rejection class="ZS::System" function-name="toArrayIndex"/>
            <rejection class="ZS::System" function-name="getMinMaxArrayRange"/>
            <rejection class="ZS::System" function-name="getMinCountArrayRange"/>
            <rejection class="ZS::System" function-name="buildPathStr"/>
            <rejection class="ZS::System" function-name="parseAppArgs"/>
            <rejection class="ZS::System" function-name="isWhiteSpace"/>
            <rejection class="ZS::System" function-name="isDigitChar"/>
            <rejection class="ZS::System" function-name="isSign"/>
            <rejection class="ZS::System" function-name="isDecimalPoint"/>
            <rejection class="ZS::System" function-name="isDivisionPoint"/>
            <rejection class="ZS::System" function-name="isExponentChar"/>
            <rejection class="ZS::System" function-name="isNumChar"/>
            <!-- ZSSysEnum.h -->
            <enum-type name="EEnumEntryAliasStr"/>
            <enum-type name="EEnumEntryValidity"/>
            <value-type name="SEnumEntry"/>
            <object-type name="CEnumeration"/>
            <!-- ZSSysEnumVal.h -->
            <object-type name="CEnumVal"/>
            <!-- ZSSysEnumValArr.h -->
            <object-type name="CEnumValArr"/>
            <!-- ZSSysErrCode.h -->
            <enum-type name="EResultSeverity"/>
            <enum-type name="EResult"/>
            <!-- ZSSysErrLog.h -->
            <object-type name="SErrLogEntry">
                <enum-type name="EMsgType"/>
                <enum-type name="EFlags"/>
            </object-type>
            <object-type name="CErrLog"/>
            <!-- ZSSysErrResult.h -->
            <value-type name="SErrResult"/>
            <value-type name="SErrResultInfo"/>
            <!-- ZSSysException.h -->
            <object-type name="CException"/>
            <!-- ZSSysLogFile.h -->
            <object-type name="CLogFile"/>
            <!-- ZSSysMath.h -->
            <!-- ZSSysMemLeakDump.h -->
            <!-- ZSSysMsg.h -->
            <rejection class="ZS::System" function-name="systemMsgType2Str"/>
            <rejection class="ZS::System" function-name="str2SystemMsgType"/>
            <enum-type name="EBaseMsgType">
                <reject-enum-value name="EBaseMsgTypeMin"/>
                <reject-enum-value name="EBaseMsgTypeMax"/>
            </enum-type>
            <rejection class="ZS::System" function-name="baseMsgType2Str"/>
            <rejection class="ZS::System" function-name="str2BaseMsgType"/>
            <object-type name="CMsgSndRcvDestroyedHandler"/>
            <object-type name="CMsg"/>
            <!--
                Not necessary. Problem for not working type detection was double inheritance of CMsg by QEvent and QObject at the "same time".
                <object-type name="CMsg" copyable="false" polymorphic-id-expression="%1-&gt;isBaseMsgType() &amp;&amp; %1-&gt;getMsgType() == ZS::EBaseMsgTypeUndefined"/>
            -->
            <object-type name="CMsgReq"/>
            <object-type name="CMsgCon"/>
            <object-type name="CMsgInd"/>
            <object-type name="CMsgAck"/>
            <object-type name="CMsgErr"/>
            <object-type name="CMsgReqAddLogItem"/>
            <object-type name="CMsgReqStartTimer"/>
            <object-type name="CMsgConStartTimer"/>
            <object-type name="CMsgReqStopTimer"/>
            <object-type name="CMsgConStopTimer"/>
            <object-type name="CMsgReqContinue"/>
            <!-- ZSSysMsgProtocol.h -->
            <!-- ZSSysObjPool.h -->
            <enum-type name="EObjPoolEntryType"/>
            <rejection class="ZS::System" function-name="objPoolEntryType2Str"/>
            <rejection class="ZS::System" function-name="str2ObjPoolEntryType"/>
            <object-type name="CObjPool">
                <modify-function signature="addObjNode(const QString&amp;, QString*, void*)">
                    <modify-argument index="2">
                        <replace-type modified-type="QString"/>
                        <replace-default-expression with="QString()"/>
                    </modify-argument>
                </modify-function>
            </object-type>
            <object-type name="CObjPoolTreeEntry">
                <modify-field name="m_pvObj" write="false" read="false" remove="all"/>
            </object-type>
            <object-type name="CObjPoolListEntry">
                <modify-field name="m_pvObj" write="false" read="false" remove="all"/>
            </object-type>
            <!-- ZSSysRequest.h -->
            <value-type name="SRequestDscr">
                <modify-field name="m_pvResultData" write="false" read="false" remove="all"/>
            </value-type>
            <object-type name="CRequest"/>
            <!-- ZSSysRequestExecTree.h -->
            <object-type name="CRequestExecTree"/>
            <!-- ZSSysRequestQueue.h -->
            <object-type name="CRequestQueue">
                <modify-function signature="findRequestById(qint64, bool, bool*, int*) const">
                    <modify-argument index="3">
                        <remove-argument/>
                    </modify-argument>
                    <modify-argument index="4">
                        <remove-argument/>
                    </modify-argument>
                </modify-function>
                <modify-function signature="findPostponedRequestById(qint64, int*) const">
                    <modify-argument index="2">
                        <remove-argument/>
                    </modify-argument>
                </modify-function>
            </object-type>
            <!-- ZSSysRequestSequencer.h -->
            <enum-type name="ERequestEntryType"/>
            <value-type name="SRequestSeqEntry">
                <modify-field name="m_pvExec" write="false" read="false" remove="all"/>
                <modify-field name="m_fctExecuteType1" write="false" read="false" remove="all"/>
                <modify-field name="m_fctExecuteType2" write="false" read="false" remove="all"/>
            </value-type>
            <object-type name="CRequestSequencer">
                <modify-function signature="event(QEvent*)">
                    <modify-argument index="1" invalidate-after-use="yes"/>
                </modify-function>
            </object-type>
            <suppress-warning text="skipping field 'SRequestSeqEntry::m_fctExecuteType1' with unmatched type 'ZS::System::CRequest'"/>
            <suppress-warning text="skipping field 'SRequestSeqEntry::m_fctExecuteType2' with unmatched type 'ZS::System::CRequest'"/>
            <!-- ZSSysSleeperThread.h -->
            <!-- ZSSysTime.h -->
            <!-- ZSSysVersion.h -->
        </namespace-type>
        <namespace-type name="Trace" generate="yes">
            <!-- ZSSysAux.h -->
            <enum-type name="ETraceType"/>
            <rejection class="ZS::Trace" function-name="traceType2Str"/>
            <rejection class="ZS::Trace" function-name="str2TraceType"/>
            <!-- ZSSysTrcAdminObj.h -->
            <object-type name="CTrcAdminObj"/>
            <!-- ZSSysTrcAdminObjPool.h -->
            <object-type name="CTrcAdminObjPool"/>
            <!-- ZSSysTrcData.h -->
            <object-type name="CTrcData"/>
            <!-- ZSSysTrcMethod.h -->
            <object-type name="CMethodTracer"/>
            <!-- ZSSysTrcMthFile.h -->
            <object-type name="CTrcMthFile"/>
            <!-- ZSSysTrcServer.h -->
            <object-type name="STrcServerSettings"/>
            <object-type name="CTrcServerBase"/>
        </namespace-type>
    </namespace-type>
</typesystem>
