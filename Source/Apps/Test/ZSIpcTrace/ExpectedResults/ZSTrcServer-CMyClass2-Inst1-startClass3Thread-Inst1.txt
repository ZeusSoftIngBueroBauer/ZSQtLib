-> <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.startClass3Thread(Inst1)
   <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.startClass3Thread: postEvent( {ZS::Apps::Test::IpcTrace::ReqTest, startClass3Thread} )
   -> <ZS::System::CMutex> CMyClass2-Inst1-WaitClass3ThreadRunning.tryLock(0 ms)
   <- <ZS::System::CMutex> CMyClass2-Inst1-WaitClass3ThreadRunning.tryLock(): true
   -> <ZS::System::CWaitCondition> CMyClass2-Inst1-Class3ThreadRunning.wait(100 ms)
      -> <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.event({ZS::Apps::Test::IpcTrace::ReqTest, startClass3Thread})
         -> <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.startClass3Thread(Inst1)
            -> <ZS::System::CMutex> CMyClass2-Inst1-WaitClass3ThreadRunning.tryLock(0 ms)
            <- <ZS::System::CMutex> CMyClass2-Inst1-WaitClass3ThreadRunning.tryLock(): true
            -> <ZS::System::CWaitCondition> CMyClass2-Inst1-Class3ThreadRunning.wait(100 ms)
-> <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.ctor(Inst1, MyClass3ThreadInst1)
   -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.ctor(Recursive)
   <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.ctor()
<- <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.ctor()
-> <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.onClass3ThreadRunning()
   -> <ZS::System::CWaitCondition> CMyClass2-Inst1-Class3ThreadRunning.notify_all()
   <- <ZS::System::CWaitCondition> CMyClass2-Inst1-Class3ThreadRunning.notify_all()
   <- <ZS::System::CWaitCondition> CMyClass2-Inst1-Class3ThreadRunning.wait(): true
<- <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.onClass3ThreadRunning()
   -> <ZS::System::CMutex> CMyClass2-Inst1-WaitClass3ThreadRunning.unlock()
   <- <ZS::System::CMutex> CMyClass2-Inst1-WaitClass3ThreadRunning.unlock()
            <- <ZS::System::CWaitCondition> CMyClass2-Inst1-Class3ThreadRunning.wait(): true
<- <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.startClass3Thread(): Inst1
            -> <ZS::System::CMutex> CMyClass2-Inst1-WaitClass3ThreadRunning.unlock()
            <- <ZS::System::CMutex> CMyClass2-Inst1-WaitClass3ThreadRunning.unlock()
         <- <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.startClass3Thread(): Inst1
      <- <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.event()
-> <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod()
   -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
   <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
   <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod: RecursionCount=0
   -> <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod()
      -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
      <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
      <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod: RecursionCount=1
      -> <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod()
         -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
         <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
         <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod: RecursionCount=2
         -> <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod()
            -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
            <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
            <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod: RecursionCount=3
            -> <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod()
               -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
               <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
               <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod: RecursionCount=4
               -> <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod()
                  -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
                  <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
                  <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod: RecursionCount=5
                  -> <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod()
                     -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
                     <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
                     <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod: RecursionCount=6
                     -> <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod()
                        -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
                        <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
                        <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod: RecursionCount=7
                        -> <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod()
                           -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
                           <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
                           <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod: RecursionCount=8
                           -> <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod()
                              -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
                              <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
                              <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod: RecursionCount=9
                              -> <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod()
                                 -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
                                 <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.lock()
                                 <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod: RecursionCount=10
                                 -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
                                 <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
                              <- <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod(): 10
                              -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
                              <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
                           <- <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod(): 9
                           -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
                           <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
                        <- <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod(): 8
                        -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
                        <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
                     <- <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod(): 7
                     -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
                     <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
                  <- <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod(): 6
                  -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
                  <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
               <- <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod(): 5
               -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
               <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
            <- <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod(): 4
            -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
            <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
         <- <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod(): 3
         -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
         <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
      <- <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod(): 2
      -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
      <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
   <- <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod(): 1
   -> <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
   <- <ZS::System::CMutex> CMyClass3-Inst1-Counters.unlock()
<- <ZS::Apps::Test::IpcTrace::CMyClass3> Inst1.recursiveTraceMethod(): 0