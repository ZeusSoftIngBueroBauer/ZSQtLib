#*******************************************************************************
#
# Copyright 2004 - 2017 by    ZeusSoft, Ing. Buero Bauer
#                             Gewerbepark 28
#                             D-83670 Bad Heilbrunn
#                             Tel: 0049 8046 9488
#                             www.zeussoft.de
#                             E-Mail: mailbox@zeussoft.de
#
#-------------------------------------------------------------------------------
#
# Content: This file is part of the ZSQtLib.
#
# This file may be used with no license restrictions for your needs. But it is not
# allowed to resell any modules of the ZSQtLib veiling the original developer of
# the modules. Therefore the copyright link to ZeusSoft, Ing. Buero Bauer must not
# be removed from the header of the source code modules.
#
# ZeusSoft, Ing. Buero Bauer provides the source code as is without any guarantee
# that the code is written without faults.
#
# ZeusSoft, Ing. Buero Bauer does not assume any liability for any damages which
# may result in using the software modules.
#
#-------------------------------------------------------------------------------
#
# $Date: $
#
# $Revision: $
#
# $Author: $
#
# $History: $
#
#*******************************************************************************

# Get absolute path and directory name of this make file.
# As make reads various makefiles, including any obtained from the MAKEFILES
# variable, the command line, the default files, or from include directives,
# their names will be automatically appended to the MAKEFILE_LIST variable.
# They are added right before make begins to parse them.
# This means that if the first thing a makefile does is examine the last word
# in this variable, it will be the name of the current makefile.
# But please note that if once the current makefile has used include, however,
# the last word will be the just-included makefile.
# Please note that $(lastword $(MAKEFILE_LIST)) may already return an absolute path.
# If so both $(abspath $(lastword $(MAKEFILE_LIST))) and $(realpath $(lastword $(MAKEFILE_LIST)))
# don't return the absolute path but insert the absolute path of the make file before
# the absolute path again resulting in a MAKEFILE_PATH like "C:\...\Make\ZSSys\C:\...\Make\ZSSys\ZSSys.mk".
# So we only apply realpath to detect the MAKEFILE_PATH if MAKEFILE_LIST does not contain
# an absolute path already.

MAKEFILE_PATH := $(lastword $(MAKEFILE_LIST))
ifeq ($(findstring :,$(MAKEFILE_PATH)), )
    MAKEFILE_PATH := $(realpath $(lastword $(MAKEFILE_LIST)))
endif
MAKEFILE_DIR := $(shell dirname $(MAKEFILE_PATH))
MAKEFILE_DIR := $(shell dirname $(MAKEFILE_PATH))

$(info )
$(info ---> ================================================================== )
$(info ---> $(MAKEFILE_PATH))
$(info ---> ================================================================== )
$(info )

#===============================================================================
# Preconditions
#===============================================================================

# Environment Variable ZSQTLIB_DIR
#-------------------------------------------------------------------------------
# Range [Valid Directory Path]
# This environment variable specifies the base directory of the ZSQtLib files.
# The ZSQTLIB_DIR environment variable is used to automatically set other
# directory paths to be used on processing this make file as those directories
# should be located relative to this base directory.
# If not yet set before processing this make file it will be evaluated from the
# directory path of this make file.
# To extract the ZSQtLib base directory from the make files directory the
# substring "/Make" will be removed from the end of MAKEFILE_DIR.
PATH_SEP_TMP := \\
PATH_SEP_TMP := $(subst $(PATH_SEP_TMP),\,$(PATH_SEP_TMP))
ifdef ZSQTLIB_DIR
    ZSQTLIB_DIR := $(subst $(PATH_SEP_TMP),/,$(ZSQTLIB_DIR))
    ifdef TALKATIVE_MAKEFILE
        $(info ZSQTLIB_DIR defined as $(ZSQTLIB_DIR))
    endif
else
    MAKEFILE_DIR := $(shell dirname $(MAKEFILE_PATH))
    ZSQTLIB_DIR := $(subst /Make,,$(MAKEFILE_DIR))
    ZSQTLIB_DIR := $(subst PATH_SEP_TMP,/,$(ZSQTLIB_DIR))
    ifdef TALKATIVE_MAKEFILE
        $(info ZSQTLIB_DIR detected as $(ZSQTLIB_DIR))
    endif
    export ZSQTLIB_DIR
endif
ifeq ($(wildcard $(ZSQTLIB_DIR)),)
    $(error $(ZSQTLIB_DIR) does not exist!)
endif


#===============================================================================
# Make Targets
#===============================================================================

# Variable: Make File Targets
#-------------------------------------------------------------------------------
# Target files to be created by this make file.
# MAIN_TARGET .. The dynamic link library (or shared object) or executable
#                generated by the linker for this module.
ifeq ($(CONFIG), Release)
    MAIN_TARGET := $(OUT_DIR)/$(DLL_PREFIX)$(MODULE)Binding4Python.$(DLL_EXT)
    SBK_PYTHON_HDR_TRG := $(SBK_DIR)/zsqtlib_$(MODULE_LOWCASE)_python.h
    STP_DIR_MODULE_TRG := $(ZSQTLIB_DIR_BINDING4PYTHON_STP)/$(DLL_PREFIX)$(MODULE).$(DLL_EXT)
    STP_DIR_BINDING_TRG := $(ZSQTLIB_DIR_BINDING4PYTHON_STP)/$(DLL_PREFIX)$(MODULE).pyd
else ifeq ($(CONFIG), Debug)
    MAIN_TARGET := $(OUT_DIR)/$(DLL_PREFIX)$(MODULE)Binding4Pythond.$(DLL_EXT)
    SBK_PYTHON_HDR_TRG := $(SBK_DIR)/zsqtlib_$(MODULE_LOWCASE)_python.h
    STP_DIR_MODULE_TRG := $(ZSQTLIB_DIR_BINDING4PYTHON_STP)/$(DLL_PREFIX)$(MODULE)d.$(DLL_EXT)
    STP_DIR_BINDING_TRG := $(ZSQTLIB_DIR_BINDING4PYTHON_STP)/$(DLL_PREFIX)$(MODULE)d.pyd
endif


#===============================================================================
# TALKATIVE_MAKEFILE info
#===============================================================================

ifdef TALKATIVE_MAKEFILE
    TALKATIVE_MAKEFILE_MODULE := true
    TALKATIVE_MAKEFILE_ENVVARS := true
    TALKATIVE_MAKEFILE_SHELLCMDS := true
    TALKATIVE_MAKEFILE_TMPDIRS := true
    TALKATIVE_MAKEFILE_OUTDIRS := true
    TALKATIVE_MAKEFILE_INPUTDIRS := true
    TALKATIVE_MAKEFILE_INPUTFILES := true
    TALKATIVE_MAKEFILE_CFLAGS := true
    TALKATIVE_MAKEFILE_LFLAGS := true
    TALKATIVE_MAKEFILE_SBKFLAGS := true
    TALKATIVE_MAKEFILE_MAKETARGETS := true
    ZSQTLIB_SUB_MAKEFILE_PATH_TMP := $(MAKEFILE_PATH)
    ZSQTLIB_SUB_MAKEFILE_DIR_TMP := $(MAKEFILE_DIR)
    -include $(ZSQTLIB_DIR)/Make/ZSQtLib_TalkativeMakeFileInfo.mk
    MAKEFILE_PATH := $(ZSQTLIB_SUB_MAKEFILE_PATH_TMP)
    MAKEFILE_DIR := $(ZSQTLIB_SUB_MAKEFILE_DIR_TMP)
    TALKATIVE_MAKEFILE_MODULE :=
    TALKATIVE_MAKEFILE_ENVVARS :=
    TALKATIVE_MAKEFILE_SHELLCMDS :=
    TALKATIVE_MAKEFILE_TMPDIRS :=
    TALKATIVE_MAKEFILE_OUTDIRS :=
    TALKATIVE_MAKEFILE_INPUTDIRS :=
    TALKATIVE_MAKEFILE_INPUTFILES :=
    TALKATIVE_MAKEFILE_CFLAGS :=
    TALKATIVE_MAKEFILE_LFLAGS :=
    TALKATIVE_MAKEFILE_SBKFLAGS :=
    TALKATIVE_MAKEFILE_MAKETARGETS :=
endif


#===============================================================================
# Make Targets
#===============================================================================

# Make-Target: build
#-------------------------------------------------------------------------------
build: SYNCH_CLOCK $(ZSQTLIB_DIR_BIN) $(ZSQTLIB_DIR_LIB) $(OUT_DIR) $(DEP_DIR) $(INT_DIR) $(MOC_DIR) $(SBK_DIR) $(ZSQTLIB_DIR_BINDING4PYTHON_STP) $(MAIN_TARGET) $(STP_DIR_MODULE_TRG) $(STP_DIR_BINDING_TRG)

# Make-Target: shiboken
#-------------------------------------------------------------------------------
shiboken: SYNCH_CLOCK $(ZSQTLIB_DIR_BIN) $(ZSQTLIB_DIR_LIB) $(OUT_DIR) $(DEP_DIR) $(INT_DIR) $(MOC_DIR) $(SBK_DIR) $(ZSQTLIB_DIR_BINDING4PYTHON_STP) $(SBK_PYTHON_HDR_TRG) $(DEP_DIR)/$(MODULE)Binding4Python.d

# Make-Target: clean
#-------------------------------------------------------------------------------
# Deletes all files craeated during the build process running this make file.
clean:
	$(CMD_DEL) $(subst /,$(PATH_SEP),$(MAIN_TARGET))
	$(CMD_DEL) $(subst /,$(PATH_SEP),$(STP_DIR_MODULE_TRG))
	$(CMD_DEL) $(subst /,$(PATH_SEP),$(STP_DIR_BINDING_TRG))
	$(CMD_DEL) $(subst /,$(PATH_SEP),$(SBK_DIR))\*.*
	$(CMD_DEL) $(subst /,$(PATH_SEP),$(DEP_DIR))\*.*
	$(CMD_DEL) $(subst /,$(PATH_SEP),$(INT_DIR))\*.*
	$(CMD_DEL) $(subst /,$(PATH_SEP),$(MOC_DIR))\*.*
	$(CMD_DEL) $(subst /,$(PATH_SEP),$(OUT_DIR))\*.*

# Make-Target: help
#-------------------------------------------------------------------------------
# Show help text.
help:
	@echo "Make file to be used with GNU make."
	@echo .
	@echo "Aufruf   : make -f ZSSysBinding4Python_sub.mk [CONFIG=<Debug|Release>] [Target]"
	@echo .
	@echo "Targets  : build               - (default) Creates the target."
	@echo "           build_shiboken_only - Invokes shiboken only to generate the C++ wrapper modules.
	@echo "           clean               - Deletes all output files."
	@echo "           help                - Shows this help text."
	@echo .
	@echo "Example  : make -f ZSSysBinding4Python_sub.mk CONFIG=Debug build
	@echo .


#===============================================================================
# Build Targets
#===============================================================================

# Build-Target: SYNCH_CLOCK
#-------------------------------------------------------------------------------
SYNCH_CLOCK:
	@echo making target: SYNCH_CLOCK
	$(CMD_SYNCH_CLOCK)

# Build-Target: $(ZSQTLIB_DIR_LIB)
#-------------------------------------------------------------------------------
# Temporary Directory Lib/<Platform>
$(ZSQTLIB_DIR_LIB):
	@echo making target: $(ZSQTLIB_DIR_LIB)
	$(CMD_MKDIR) $(subst /,$(PATH_SEP),$(ZSQTLIB_DIR_LIB))

# Build-Target: $(ZSQTLIB_DIR_BIN)
#-------------------------------------------------------------------------------
# Temporary Directory Bin/<Platform>
$(ZSQTLIB_DIR_BIN):
	@echo making target: $(ZSQTLIB_DIR_BIN)
	$(CMD_MKDIR) $(subst /,$(PATH_SEP),$(ZSQTLIB_DIR_BIN))

# Build-Target: $(ZSQTLIB_DIR_STP)
#-------------------------------------------------------------------------------
# Temporary Directory Setup/<Platform>
$(ZSQTLIB_DIR_STP):
	@echo making target: $(ZSQTLIB_DIR_STP)
	$(CMD_MKDIR) $(subst /,$(PATH_SEP),$(ZSQTLIB_DIR_STP))

# Build-Target: $(DEP_DIR)
#-------------------------------------------------------------------------------
# Temporary Directory Tmp/Dep/<Module>/<Platform>/<Config>
$(DEP_DIR):
	@echo making target: $(DEP_DIR)
	$(CMD_MKDIR) $(subst /,$(PATH_SEP),$(DEP_DIR))

# Build-Target: $(INT_DIR)
#-------------------------------------------------------------------------------
# Temporary Directory Tmp/Int/<Module>/<Platform>/<Config>
$(INT_DIR):
	@echo making target: $(INT_DIR)
	$(CMD_MKDIR) $(subst /,$(PATH_SEP),$(INT_DIR))

# Build-Target: $(MOC_DIR)
#-------------------------------------------------------------------------------
# Temporary Directory Tmp/Moc/<Module>/<Platform>/<Config>
$(MOC_DIR):
	@echo making target: $(MOC_DIR)
	$(CMD_MKDIR) $(subst /,$(PATH_SEP),$(MOC_DIR))

# Build-Target: $(OUT_DIR)
#-------------------------------------------------------------------------------
# Temporary Directory Tmp/Out/<Module>/<Platform>/<Config>
$(OUT_DIR):
	@echo making target: $(OUT_DIR)
	$(CMD_MKDIR) $(subst /,$(PATH_SEP),$(OUT_DIR))

# Build-Target: $(SBK_DIR)
#-------------------------------------------------------------------------------
# Temporary Directory Tmp/Shiboken/Python<Version>/<Platform>/<Config>/ZSQtLib/<Module>
$(SBK_DIR):
	@echo making target: $(SBK_DIR)
	$(CMD_MKDIR) $(subst /,$(PATH_SEP),$(SBK_DIR))

# Build-Target: $(ZSQTLIB_DIR_BINDING4PYTHON_STP)
#-------------------------------------------------------------------------------
# Setup Directory Setup/$(PLATFORM)/Bindings/Python$(PYTHONVERSION)/ZSQtLib
$(ZSQTLIB_DIR_BINDING4PYTHON_STP):
	@echo making target: $(ZSQTLIB_DIR_BINDING4PYTHON_STP)
	$(CMD_MKDIR) $(subst /,$(PATH_SEP),$(ZSQTLIB_DIR_BINDING4PYTHON_STP))

# Build-Target: $(SBK_PYTHON_HDR_TRG)
#-------------------------------------------------------------------------------
#$(SBK_PYTHON_HDR_TRG): $(ZSQTLIB_DIR)/Make/$(MODULE)/$(MODULE)Binding4Python.h $(ZSQTLIB_DIR)/Make/$(MODULE)/$(MODULE)Binding4PythonGlobalFunctionsWrapper.h $(ZSQTLIB_DIR)/Make/$(MODULE)/$(MODULE)Binding4Python.xml $(DEP_DIR)/$(MODULE)Binding4Python.d $(HDR_ITEMS)
$(SBK_PYTHON_HDR_TRG): $(ZSQTLIB_DIR)/Make/$(MODULE)/$(MODULE)Binding4Python.h $(ZSQTLIB_DIR)/Make/$(MODULE)/$(MODULE)Binding4PythonGlobalFunctionsWrapper.h $(ZSQTLIB_DIR)/Make/$(MODULE)/$(MODULE)Binding4Python.xml
	@echo making target: $(SBK_PYTHON_HDR_TRG)
	$(CMD_SHIBOKEN) $(SBK_FLAGS)

# Build-Target: $(MAIN_TARGET)
#-------------------------------------------------------------------------------
# The dll (or shared object) or executable file to be created by this make file.
#   MAIN_TARGET := $(OUT_DIR)/$(MODULE)Binding4Python[d].$(DLL_EXT)
#     OUT_DIR := $(ZSQTLIB_DIR)/Tmp/Out/$(MODULE)Binding4Python/$(PLATFORM)/$(CONFIG)
#     MODULE = ZSSys|ZSSysGUI|...
#     DLL_EXT = dll|so|exe
# Because the argument list for the link tools on linux and windows is different
# it is not possible to use just one target here. Instead for each platform and
# config (debug/release) a separate target must be specified.

$(ZSQTLIB_DIR_TMP)/Out/$(MODULE)Binding4Python/Win32/$(CONFIG)/$(DLL_PREFIX)$(MODULE)Binding4Python.$(DLL_EXT): $(OBJ_ITEMS)
	@echo making target: $(ZSQTLIB_DIR)/Tmp/Out/$(MODULE)Binding4Python/Win32/$(CONFIG)/$(MODULE)Binding4Python.$(DLL_EXT)
	$(LNK) $(OBJ_ITEMS) $(LIB_DIRS) $(LFLAGS) $(OSLIBS) $(QTLIBS) $(3RDPARTYLIBS) $(ZSQTLIBS)
	mt -manifest "$(MANIFESTFILE)" -outputresource:"$(MAIN_TARGET);#2"

$(ZSQTLIB_DIR_TMP)/Out/$(MODULE)Binding4Python/Win32/$(CONFIG)/$(DLL_PREFIX)$(MODULE)Binding4Pythond.$(DLL_EXT): $(OBJ_ITEMS)
	@echo making target: $(ZSQTLIB_DIR)/Tmp/Out/$(MODULE)Binding4Python/Win32/$(CONFIG)/$(MODULE)Binding4Pythond.$(DLL_EXT)
	$(LNK) $(OBJ_ITEMS) $(LIB_DIRS) $(LFLAGS) $(OSLIBS) $(QTLIBS) $(3RDPARTYLIBS) $(ZSQTLIBS)
	mt -manifest "$(MANIFESTFILE)" -outputresource:"$(MAIN_TARGET);#2"

$(ZSQTLIB_DIR_TMP)/Out/$(MODULE)Binding4Python/Linux/$(CONFIG)/$(DLL_PREFIX)$(MODULE)Binding4Python.$(DLL_EXT): $(OBJ_ITEMS)
	@echo making target: $(ZSQTLIB_DIR)/Tmp/Out/$(MODULE)Binding4Python/Linux/$(CONFIG)/$(MODULE)Binding4Python.$(DLL_EXT)
	$(LNK) $(OBJ_ITEMS) $(LIB_DIRS) $(LFLAGS) $(OSLIBS) $(QTLIBS) $(3RDPARTYLIBS) $(ZSQTLIBS) -o $(MAIN_TARGET)

$(ZSQTLIB_DIR_TMP)/Out/$(MODULE)Binding4Python/Linux/$(CONFIG)/$(DLL_PREFIX)$(MODULE)Binding4Pythond.$(DLL_EXT): $(OBJ_ITEMS)
	@echo making target: $(ZSQTLIB_DIR)/Tmp/Out/$(MODULE)Binding4Python/Linux/$(CONFIG)/$(MODULE)Binding4Pythond.$(DLL_EXT)
	$(LNK) $(OBJ_ITEMS) $(LIB_DIRS) $(LFLAGS) $(OSLIBS) $(QTLIBS) $(3RDPARTYLIBS) $(ZSQTLIBS) -o $(MAIN_TARGET)

# Build-Target: $(STP_DIR_MODULE_TRG)
#-------------------------------------------------------------------------------

# File: Setup/<Platform>/Bindings/Python<Version>/ZSQtLib/<Module>.dll|so  (Release Version)
$(ZSQTLIB_DIR_BINDING4PYTHON_STP)/$(DLL_PREFIX)$(MODULE).$(DLL_EXT): $(ZSQTLIB_DIR_BIN)/$(DLL_PREFIX)$(MODULE).$(DLL_EXT)
	@echo making target: $(ZSQTLIB_DIR_BINDING4PYTHON_STP)/$(MODULE).$(DLL_EXT)
	$(CMD_COPY) $(subst /,$(PATH_SEP),$(ZSQTLIB_DIR_BIN)/$(DLL_PREFIX)$(MODULE).$(DLL_EXT)) $(subst /,$(PATH_SEP),$(STP_DIR_MODULE_TRG))

# File: Setup/<Platform>/Bindings/Python<Version>/ZSQtLib/<Module>d.dll|so (Debug Version)
$(ZSQTLIB_DIR_BINDING4PYTHON_STP)/$(DLL_PREFIX)$(MODULE)d.$(DLL_EXT): $(ZSQTLIB_DIR_BIN)/$(DLL_PREFIX)$(MODULE)d.$(DLL_EXT)
	@echo making target: $(ZSQTLIB_DIR_BINDING4PYTHON_STP)/$(MODULE)d.$(DLL_EXT)
	$(CMD_COPY) $(subst /,$(PATH_SEP),$(ZSQTLIB_DIR_BIN)/$(DLL_PREFIX)$(MODULE)d.$(DLL_EXT)) $(subst /,$(PATH_SEP),$(STP_DIR_MODULE_TRG))

# Build-Target: $(STP_DIR_BINDING_TRG)
#-------------------------------------------------------------------------------
# File: Setup/<Platform>/Bindings/Python<Version>/ZSQtLib/<Module>[d].pyd
$(STP_DIR_BINDING_TRG): $(MAIN_TARGET)
	@echo making target: $(STP_DIR_BINDING_TRG)
	$(CMD_COPY) $(subst /,$(PATH_SEP),$(MAIN_TARGET)) $(subst /,$(PATH_SEP),$(STP_DIR_BINDING_TRG))

#===============================================================================
# Sub-Build Targets
#===============================================================================

# Sub-Build-Target: <*.obj>
#-------------------------------------------------------------------------------
# The object files to be created by this make file 
# INT_DIR := $(ZSQTLIB_DIR)/Tmp/Int/$(MODULE)/$(PLATFORM)/$(CONFIG)
# Because the argument list for the compiler tools on linux and windows is different
# it is not possible to use just one target here. Instead for each platform
# a separate target must be specified.
# We use the GCC compiler to create a list of dependencies to included
# header files as only the GCC compiler but not the Visual C compiler
# supports this feature by using the preprocessor options -MM, -MT and -MF.
#   -E
#      Run only the C preprocessor. Preprocess all the C source files specified
#      and output the results to standard output or to the specified output file.
#   -M
#      Instead of outputting the result of preprocessing, output a rule
#      suitable for make describing the dependencies of the main source file.
#      The preprocessor outputs one make rule containing the object file name
#      for that source file, a colon, and the names of all the included files.
#      Unless overridden explicitly, the object file name consists of the
#      basename of the source file with any suffix replaced with object file
#      suffix. If there are many included files then the rule is split into
#      several lines using '\'-newline.
#      '-M' implies '-E'.
#   -MM
#      Like '-M', but mention only the files included with '#include "file"'.
#      System header files included with `#include <file>' are omitted.
#   -MD
#      Like '-M' but the dependency information is written to a file rather
#      than stdout. gcc will use the same file name and directory as the object
#      file, but with the suffix '.d' instead.
#      This is in addition to compiling the main file as specified.
#      '-MD' does not inhibit ordinary compilation the way '-M' does, unless
#      you also specify '-MG'.
#      With Mach, you can use the utility md to merge multiple dependency files
#      into a single dependency file suitable for using with the 'make' command.
#   -MMD:
#      Like `-MD' except mention only user header files, not system header files.
#   -MT $@:
#      Set the name of the target in the generated dependency file.
#      Generate dependency information as a side-effect of compilation, not instead
#      of compilation. This version omits system headers from the generated dependencies.
#      If you prefer to preserve system headers as prerequisites, use -MD.
#   -MP:
#      Adds a target for each prerequisite in the list, to avoid errors when deleting files.
#   -MF $(DEP_DIR)/$*.Td
#      Write the generated dependency file to a temporary location $(DEP_DIR)/$*.Td.
# After the source files have been compiled into object files the generated temporary
# dependency files will be renamed to the real dependency files. We do this in a separate
# step so that failures during the compilation won\92t leave a corrupted dependency file.

$(ZSQTLIB_DIR_TMP)/Int/$(MODULE)Binding4Python/Win32/$(CONFIG)/%.$(OBJ_EXT): $(ZSQTLIB_DIR_TMP)/Shiboken/Python$(PYTHONVERSION)/Win32/$(CONFIG)/ZSQtLib/$(MODULE)/%.cpp
	@echo making target: $(ZSQTLIB_DIR_TMP)/Int/$(MODULE)Binding4Python/Win32/$(CONFIG)/%.$(OBJ_EXT)
	gcc $(subst -Include,/Include,$(subst /I,-I,$(INC_DIRS))) -D$(DEFINE_OS) -MM -MT $@ -MP -MF $(DEP_DIR)/$*.Td $<
	$(CXX) $(INC_DIRS) /D $(DEFINE_OS) $(DEFINES) $(CFLAGS) $<
	$(CMD_RENAME) $(DEP_DIR)/$*.Td $(DEP_DIR)/$*.d

$(ZSQTLIB_DIR_TMP)/Int/$(MODULE)Binding4Python/Linux/$(CONFIG)/%.$(OBJ_EXT): $(ZSQTLIB_DIR_TMP)/Shiboken/Python$(PYTHONVERSION)/Linux/$(CONFIG)/ZSQtLib/$(MODULE)/%.cpp
	@echo making target: $(ZSQTLIB_DIR_TMP)/Int/$(MODULE)/Linux/$(CONFIG)/%.$(OBJ_EXT)
	gcc $(subst -Include,/Include,$(subst /I,-I,$(INC_DIRS))) -D$(DEFINE_OS) -MM -MT $@ -MP -MF $(DEP_DIR)/$*.Td $<
	$(CXX) $(INC_DIRS) -D$(DEFINE_OS) $(DEFINES) -o $(INT_DIR)/$*.$(OBJ_EXT) $(CFLAGS) $<
	$(CMD_RENAME) $(DEP_DIR)/$*.Td $(DEP_DIR)/$*.d

# Sub-Build-Target: <Module>.d
#-------------------------------------------------------------------------------
# Auto generated dependency files.
$(DEP_DIR)/$(MODULE)Binding4Python.d: $(ZSQTLIB_DIR)/Make/$(MODULE)/$(MODULE)Binding4Python.cpp
	@echo making target: $(DEP_DIR)/$(MODULE)Binding4Python.d
	gcc $(subst -Include,/Include,$(subst /I,-I,$(INC_DIRS))) -D$(DEFINE_OS) -MM -MT $@ -MP -MF $(DEP_DIR)/$(MODULE)Binding4Python.Td $<
	$(CMD_RENAME) $(DEP_DIR)/$(MODULE)Binding4Python.Td $(DEP_DIR)/$(MODULE)Binding4Python.d

$(info )
$(info <--- $(MAKEFILE_PATH) )
$(info )
