<GUIMain                 > -> <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.startMessageTimer()
<GUIMain                 >    -> <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.ctor()
<GUIMain                 >       -> <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.lock()
<GUIMain                 >       <- <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.lock()
<GUIMain                 >    <- <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.ctor()
<GUIMain                 >    <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.startMessageTimer: postEvent( {ZS::Apps::Test::IpcTrace::ReqTest, startMessageTimer} )
<GUIMain                 >    -> <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.dtor()
<GUIMain                 >       -> <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.unlock()
<GUIMain                 >       <- <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.unlock()
<GUIMain                 >    <- <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.dtor()
<GUIMain                 > <- <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.startMessageTimer()
<MyClass2ThreadInst1     >       -> <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.event({ZS::Apps::Test::IpcTrace::ReqTest, startMessageTimer})
<MyClass2ThreadInst1     >          -> <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.startMessageTimer()
<MyClass2ThreadInst1     >             -> <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.ctor()
<MyClass2ThreadInst1     >                -> <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.lock()
<MyClass2ThreadInst1     >                <- <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.lock()
<MyClass2ThreadInst1     >             <- <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.ctor()
<MyClass2ThreadInst1     >             <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.startMessageTimer: m_pTmrMessages->start(100)
<MyClass2ThreadInst1     >             -> <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.dtor()
<MyClass2ThreadInst1     >                -> <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.unlock()
<MyClass2ThreadInst1     >                <- <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.unlock()
<MyClass2ThreadInst1     >             <- <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.dtor()
<MyClass2ThreadInst1     >          <- <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.startMessageTimer()
<MyClass2ThreadInst1     >       <- <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.event()
<MyClass2ThreadInst1     >       -> <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.onTmrMessagesTimeout()
<MyClass2ThreadInst1     >          -> <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.ctor()
<MyClass2ThreadInst1     >             -> <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.lock()
<MyClass2ThreadInst1     >             <- <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.lock()
<MyClass2ThreadInst1     >          <- <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.ctor()
<MyClass2ThreadInst1     >          <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.onTmrMessagesTimeout: MsgCount=1
<MyClass2ThreadInst1     >          -> <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.dtor()
<MyClass2ThreadInst1     >             -> <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.unlock()
<MyClass2ThreadInst1     >             <- <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.unlock()
<MyClass2ThreadInst1     >          <- <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.dtor()
<MyClass2ThreadInst1     >       <- <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.onTmrMessagesTimeout()
<MyClass2ThreadInst1     >       -> <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.onTmrMessagesTimeout()
<MyClass2ThreadInst1     >          -> <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.ctor()
<MyClass2ThreadInst1     >             -> <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.lock()
<MyClass2ThreadInst1     >             <- <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.lock()
<MyClass2ThreadInst1     >          <- <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.ctor()
<MyClass2ThreadInst1     >          <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.onTmrMessagesTimeout: MsgCount=2
<MyClass2ThreadInst1     >          -> <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.dtor()
<MyClass2ThreadInst1     >             -> <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.unlock()
<MyClass2ThreadInst1     >             <- <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.unlock()
<MyClass2ThreadInst1     >          <- <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.dtor()
<MyClass2ThreadInst1     >       <- <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.onTmrMessagesTimeout()
<MyClass2ThreadInst1     >       -> <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.onTmrMessagesTimeout()
<MyClass2ThreadInst1     >          -> <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.ctor()
<MyClass2ThreadInst1     >             -> <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.lock()
<MyClass2ThreadInst1     >             <- <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.lock()
<MyClass2ThreadInst1     >          <- <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.ctor()
<MyClass2ThreadInst1     >          <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.onTmrMessagesTimeout: MsgCount=3
<MyClass2ThreadInst1     >          -> <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.dtor()
<MyClass2ThreadInst1     >             -> <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.unlock()
<MyClass2ThreadInst1     >             <- <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.unlock()
<MyClass2ThreadInst1     >          <- <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.dtor()
<MyClass2ThreadInst1     >       <- <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.onTmrMessagesTimeout()
<MyClass2ThreadInst1     >       -> <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.onTmrMessagesTimeout()
<MyClass2ThreadInst1     >          -> <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.ctor()
<MyClass2ThreadInst1     >             -> <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.lock()
<MyClass2ThreadInst1     >             <- <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.lock()
<MyClass2ThreadInst1     >          <- <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.ctor()
<MyClass2ThreadInst1     >          <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.onTmrMessagesTimeout: MsgCount=4
<MyClass2ThreadInst1     >          -> <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.dtor()
<MyClass2ThreadInst1     >             -> <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.unlock()
<MyClass2ThreadInst1     >             <- <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.unlock()
<MyClass2ThreadInst1     >          <- <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.dtor()
<MyClass2ThreadInst1     >       <- <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.onTmrMessagesTimeout()
<MyClass2ThreadInst1     >       -> <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.onTmrMessagesTimeout()
<MyClass2ThreadInst1     >          -> <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.ctor()
<MyClass2ThreadInst1     >             -> <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.lock()
<MyClass2ThreadInst1     >             <- <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.lock()
<MyClass2ThreadInst1     >          <- <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.ctor()
<MyClass2ThreadInst1     >          <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.onTmrMessagesTimeout: MsgCount=5
<MyClass2ThreadInst1     >          -> <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.dtor()
<MyClass2ThreadInst1     >             -> <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.unlock()
<MyClass2ThreadInst1     >             <- <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.unlock()
<MyClass2ThreadInst1     >          <- <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.dtor()
<MyClass2ThreadInst1     >       <- <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.onTmrMessagesTimeout()
<MyClass2ThreadInst1     >       -> <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.onTmrMessagesTimeout()
<MyClass2ThreadInst1     >          -> <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.ctor()
<MyClass2ThreadInst1     >             -> <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.lock()
<MyClass2ThreadInst1     >             <- <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.lock()
<MyClass2ThreadInst1     >          <- <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.ctor()
<MyClass2ThreadInst1     >          <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.onTmrMessagesTimeout: MsgCount=6
<MyClass2ThreadInst1     >          -> <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.dtor()
<MyClass2ThreadInst1     >             -> <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.unlock()
<MyClass2ThreadInst1     >             <- <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.unlock()
<MyClass2ThreadInst1     >          <- <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.dtor()
<MyClass2ThreadInst1     >       <- <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.onTmrMessagesTimeout()
<MyClass2ThreadInst1     >       -> <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.onTmrMessagesTimeout()
<MyClass2ThreadInst1     >          -> <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.ctor()
<MyClass2ThreadInst1     >             -> <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.lock()
<MyClass2ThreadInst1     >             <- <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.lock()
<MyClass2ThreadInst1     >          <- <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.ctor()
<MyClass2ThreadInst1     >          <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.onTmrMessagesTimeout: MsgCount=7
<MyClass2ThreadInst1     >          -> <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.dtor()
<MyClass2ThreadInst1     >             -> <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.unlock()
<MyClass2ThreadInst1     >             <- <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.unlock()
<MyClass2ThreadInst1     >          <- <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.dtor()
<MyClass2ThreadInst1     >       <- <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.onTmrMessagesTimeout()
<MyClass2ThreadInst1     >       -> <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.onTmrMessagesTimeout()
<MyClass2ThreadInst1     >          -> <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.ctor()
<MyClass2ThreadInst1     >             -> <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.lock()
<MyClass2ThreadInst1     >             <- <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.lock()
<MyClass2ThreadInst1     >          <- <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.ctor()
<MyClass2ThreadInst1     >          <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.onTmrMessagesTimeout: MsgCount=8
<MyClass2ThreadInst1     >          -> <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.dtor()
<MyClass2ThreadInst1     >             -> <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.unlock()
<MyClass2ThreadInst1     >             <- <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.unlock()
<MyClass2ThreadInst1     >          <- <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.dtor()
<MyClass2ThreadInst1     >       <- <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.onTmrMessagesTimeout()
<MyClass2ThreadInst1     >       -> <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.onTmrMessagesTimeout()
<MyClass2ThreadInst1     >          -> <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.ctor()
<MyClass2ThreadInst1     >             -> <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.lock()
<MyClass2ThreadInst1     >             <- <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.lock()
<MyClass2ThreadInst1     >          <- <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.ctor()
<MyClass2ThreadInst1     >          <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.onTmrMessagesTimeout: MsgCount=9
<MyClass2ThreadInst1     >          -> <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.dtor()
<MyClass2ThreadInst1     >             -> <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.unlock()
<MyClass2ThreadInst1     >             <- <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.unlock()
<MyClass2ThreadInst1     >          <- <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.dtor()
<MyClass2ThreadInst1     >       <- <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.onTmrMessagesTimeout()
<MyClass2ThreadInst1     >       -> <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.onTmrMessagesTimeout()
<MyClass2ThreadInst1     >          -> <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.ctor()
<MyClass2ThreadInst1     >             -> <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.lock()
<MyClass2ThreadInst1     >             <- <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.lock()
<MyClass2ThreadInst1     >          <- <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.ctor()
<MyClass2ThreadInst1     >          <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.onTmrMessagesTimeout: MsgCount=10
<MyClass2ThreadInst1     >          -> <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.dtor()
<MyClass2ThreadInst1     >             -> <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.unlock()
<MyClass2ThreadInst1     >             <- <ZS::System::CRecursiveMutex> CMyClass2-Inst1-Counters.unlock()
<MyClass2ThreadInst1     >          <- <ZS::System::CMutexLocker> CMyClass2-Inst1-Counters.dtor()
<MyClass2ThreadInst1     >       <- <ZS::Apps::Test::IpcTrace::CMyClass2> Inst1.onTmrMessagesTimeout()